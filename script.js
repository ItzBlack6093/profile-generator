const A = 19
var output
var outputRecord
var dataset = {
  minotypes: ["z", "l", "o", "s", "i", "j", "t"],
  minocolors: ["z", "l", "o", "s", "i", "j", "t", "g", "d", "gb", "gbd"],
  tetrominoes: {
      i1: {
          matrix: {
              w: 1,
              h: 1,
              dx: 0,
              dy: 1,
              data: [[[0, 0, 255]], [[0, 0, 255]], [[0, 0, 255]], [[0, 0, 255]]]
          },
          preview: {
              w: 1,
              h: 1,
              data: [[0, 0, 255]]
          },
          disallow_kick: !0
      },
      i2: {
          matrix: {
              w: 2,
              h: 2,
              dx: 0,
              dy: 1,
              data: [[[0, 0, 199], [1, 0, 124]], [[1, 0, 241], [1, 1, 31]], [[1, 1, 124], [0, 1, 199]], [[0, 1, 31], [0, 0, 241]]]
          },
          preview: {
              w: 2,
              h: 1,
              data: [[0, 0, 199], [1, 0, 124]]
          },
          kickset_special: "i2"
      },
      i3: {
          matrix: {
              w: 3,
              h: 3,
              dx: 1,
              dy: 1,
              data: [[[0, 1, 199], [1, 1, 68], [2, 1, 124]], [[1, 0, 241], [1, 1, 17], [1, 2, 31]], [[2, 1, 124], [1, 1, 68], [0, 1, 199]], [[1, 2, 31], [1, 1, 17], [1, 0, 241]]]
          },
          preview: {
              w: 3,
              h: 1,
              data: [[0, 0, 199], [1, 0, 68], [2, 0, 124]]
          },
          kickset_special: "i3"
      },
      l3: {
          matrix: {
              w: 2,
              h: 2,
              dx: 0,
              dy: 1,
              data: [[[0, 0, 241], [0, 1, 39], [1, 1, 124]], [[1, 0, 124], [0, 0, 201], [0, 1, 31]], [[1, 1, 31], [1, 0, 114], [0, 0, 199]], [[0, 1, 199], [1, 1, 156], [1, 0, 241]]]
          },
          preview: {
              w: 2,
              h: 2,
              data: [[0, 0, 241], [0, 1, 39], [1, 1, 124]]
          },
          kickset_special: "l3"
      },
      i5: {
          matrix: {
              w: 5,
              h: 5,
              dx: 2,
              dy: 2,
              data: [[[0, 2, 199], [1, 2, 68], [2, 2, 68], [3, 2, 68], [4, 2, 124]], [[2, 0, 241], [2, 1, 17], [2, 2, 17], [2, 3, 17], [2, 4, 31]], [[4, 2, 124], [3, 2, 68], [2, 2, 68], [1, 2, 68], [0, 2, 199]], [[2, 4, 31], [2, 3, 17], [2, 2, 17], [2, 1, 17], [2, 0, 241]]]
          },
          preview: {
              w: 5,
              h: 1,
              data: [[0, 0, 199], [1, 0, 68], [2, 0, 68], [3, 0, 68], [4, 0, 124]]
          },
          kickset_special: "i5"
      },
      z: {
          matrix: {
              w: 3,
              h: 3,
              dx: 1,
              dy: 1,
              data: [[[0, 0, 199], [1, 0, 114], [1, 1, 39], [2, 1, 124]], [[2, 0, 241], [2, 1, 156], [1, 1, 201], [1, 2, 31]], [[2, 2, 124], [1, 2, 39], [1, 1, 114], [0, 1, 199]], [[0, 2, 31], [0, 1, 201], [1, 1, 156], [1, 0, 241]]]
          },
          preview: {
              w: 3,
              h: 2,
              data: [[0, 0, 199], [1, 0, 114], [1, 1, 39], [2, 1, 124]]
          }
      },
      l: {
          matrix: {
              w: 3,
              h: 3,
              dx: 1,
              dy: 1,
              data: [[[2, 0, 241], [0, 1, 199], [1, 1, 68], [2, 1, 156]], [[2, 2, 124], [1, 0, 241], [1, 1, 17], [1, 2, 39]], [[0, 2, 31], [2, 1, 124], [1, 1, 68], [0, 1, 201]], [[0, 0, 199], [1, 2, 31], [1, 1, 17], [1, 0, 114]]]
          },
          preview: {
              w: 3,
              h: 2,
              data: [[2, 0, 241], [0, 1, 199], [1, 1, 68], [2, 1, 156]]
          }
      },
      o: {
          matrix: {
              w: 2,
              h: 2,
              dx: 0,
              dy: 1,
              data: [[[0, 0, 193], [1, 0, 112], [0, 1, 7], [1, 1, 28]], [[1, 0, 112], [1, 1, 28], [0, 0, 193], [0, 1, 7]], [[1, 1, 28], [0, 1, 7], [1, 0, 112], [0, 0, 193]], [[0, 1, 7], [0, 0, 193], [1, 1, 28], [1, 0, 112]]]
          },
          preview: {
              w: 2,
              h: 2,
              data: [[0, 0, 193], [1, 0, 112], [0, 1, 7], [1, 1, 28]]
          },
          disallow_kick: !0
      },
      s: {
          matrix: {
              w: 3,
              h: 3,
              dx: 1,
              dy: 1,
              data: [[[1, 0, 201], [2, 0, 124], [0, 1, 199], [1, 1, 156]], [[2, 1, 114], [2, 2, 31], [1, 0, 241], [1, 1, 39]], [[1, 2, 156], [0, 2, 199], [2, 1, 124], [1, 1, 201]], [[0, 1, 39], [0, 0, 241], [1, 2, 31], [1, 1, 114]]]
          },
          preview: {
              w: 3,
              h: 2,
              data: [[1, 0, 201], [2, 0, 124], [0, 1, 199], [1, 1, 156]]
          }
      },
      i: {
          matrix: {
              w: 4,
              h: 4,
              dx: 1,
              dy: 1,
              data: [[[0, 1, 199], [1, 1, 68], [2, 1, 68], [3, 1, 124]], [[2, 0, 241], [2, 1, 17], [2, 2, 17], [2, 3, 31]], [[3, 2, 124], [2, 2, 68], [1, 2, 68], [0, 2, 199]], [[1, 3, 31], [1, 2, 17], [1, 1, 17], [1, 0, 241]]]
          },
          preview: {
              w: 4,
              h: 1,
              data: [[0, 0, 199], [1, 0, 68], [2, 0, 68], [3, 0, 124]]
          },
          kickset_special: "i"
      },
      j: {
          matrix: {
              w: 3,
              h: 3,
              dx: 1,
              dy: 1,
              data: [[[0, 0, 241], [0, 1, 39], [1, 1, 68], [2, 1, 124]], [[2, 0, 124], [1, 0, 201], [1, 1, 17], [1, 2, 31]], [[2, 2, 31], [2, 1, 114], [1, 1, 68], [0, 1, 199]], [[0, 2, 199], [1, 2, 156], [1, 1, 17], [1, 0, 241]]]
          },
          preview: {
              w: 3,
              h: 2,
              data: [[0, 0, 241], [0, 1, 39], [1, 1, 68], [2, 1, 124]]
          }
      },
      t: {
          matrix: {
              w: 3,
              h: 3,
              dx: 1,
              dy: 1,
              data: [[[1, 0, 241], [0, 1, 199], [1, 1, 164], [2, 1, 124]], [[2, 1, 124], [1, 0, 241], [1, 1, 41], [1, 2, 31]], [[1, 2, 31], [2, 1, 124], [1, 1, 74], [0, 1, 199]], [[0, 1, 199], [1, 2, 31], [1, 1, 146], [1, 0, 241]]]
          },
          preview: {
              w: 3,
              h: 2,
              data: [[1, 0, 241], [0, 1, 199], [1, 1, 164], [2, 1, 124]]
          }
      },
      oo: {
          matrix: {
              w: 4,
              h: 4,
              dx: 1,
              dy: 1,
              data: [[[0, 1, 193], [1, 1, 64], [2, 1, 64], [3, 1, 112], [0, 2, 7], [1, 2, 4], [2, 2, 4], [3, 2, 28]], [[2, 0, 112], [2, 1, 16], [2, 2, 16], [2, 3, 28], [1, 0, 193], [1, 1, 1], [1, 2, 1], [1, 3, 7]], [[3, 2, 28], [2, 2, 68], [1, 2, 68], [0, 2, 7], [3, 1, 112], [2, 1, 64], [1, 1, 64], [0, 1, 193]], [[1, 3, 7], [1, 2, 1], [1, 1, 1], [1, 0, 193], [2, 3, 28], [2, 2, 16], [2, 1, 16], [2, 0, 112]]]
          },
          preview: {
              w: 4,
              h: 2,
              data: [[0, 0, 193], [1, 0, 64], [2, 0, 64], [3, 0, 112], [0, 1, 7], [1, 1, 4], [2, 1, 4], [3, 1, 28]]
          },
          kickset_special: "oo",
          weight: 1
      }
  },
  tetrominoes_color: {
      i1: "i",
      i2: "i",
      i3: "i",
      l3: "j",
      i5: "i",
      z: "z",
      l: "l",
      o: "o",
      s: "s",
      i: "i",
      j: "j",
      t: "t",
      oo: "o",
      g: "g",
      d: "d",
      gb: "gb",
      gbd: "gbd"
  },
  spinbonuses_rules: {
      none: {},
      stupid: {
          types: ["i1", "i2", "i3", "l3", "i5", "z", "l", "o", "s", "i", "j", "t", "oo"],
          types_mini: ["t"]
      },
      all: {
          types: ["i1", "i2", "i3", "l3", "i5", "z", "l", "o", "s", "i", "j", "t", "oo"],
          types_mini: ["t"]
      },
      "all-mini": {
          types: ["i1", "i2", "i3", "l3", "i5", "z", "l", "o", "s", "i", "j", "t", "oo"],
          types_mini: ["t"]
      },
      handheld: {
          types: ["t", "s", "z", "l", "j"],
          types_mini: ["t"]
      },
      "T-spins": {
          types: ["t"],
          types_mini: ["t"]
      }
  },
  kicksets: {
      SRS: {
          kicks: {
              "01": [[-1, 0], [-1, -1], [0, 2], [-1, 2]],
              10: [[1, 0], [1, 1], [0, -2], [1, -2]],
              12: [[1, 0], [1, 1], [0, -2], [1, -2]],
              21: [[-1, 0], [-1, -1], [0, 2], [-1, 2]],
              23: [[1, 0], [1, -1], [0, 2], [1, 2]],
              32: [[-1, 0], [-1, 1], [0, -2], [-1, -2]],
              30: [[-1, 0], [-1, 1], [0, -2], [-1, -2]],
              "03": [[1, 0], [1, -1], [0, 2], [1, 2]],
              "02": [[0, -1], [1, -1], [-1, -1], [1, 0], [-1, 0]],
              13: [[1, 0], [1, -2], [1, -1], [0, -2], [0, -1]],
              20: [[0, 1], [-1, 1], [1, 1], [-1, 0], [1, 0]],
              31: [[-1, 0], [-1, -2], [-1, -1], [0, -2], [0, -1]]
          },
          i_kicks: {
              "01": [[-2, 0], [1, 0], [-2, 1], [1, -2]],
              10: [[2, 0], [-1, 0], [2, -1], [-1, 2]],
              12: [[-1, 0], [2, 0], [-1, -2], [2, 1]],
              21: [[1, 0], [-2, 0], [1, 2], [-2, -1]],
              23: [[2, 0], [-1, 0], [2, -1], [-1, 2]],
              32: [[-2, 0], [1, 0], [-2, 1], [1, -2]],
              30: [[1, 0], [-2, 0], [1, 2], [-2, -1]],
              "03": [[-1, 0], [2, 0], [-1, -2], [2, 1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          i2_kicks: {
              "01": [[0, -1], [-1, 0], [-1, -1]],
              10: [[0, 1], [1, 0], [1, 1]],
              12: [[1, 0], [0, -1], [1, 0]],
              21: [[-1, 0], [0, 1], [-1, 0]],
              23: [[0, 1], [1, 0], [1, -1]],
              32: [[0, -1], [-1, 0], [-1, 1]],
              30: [[-1, 0], [0, 1], [-1, 2]],
              "03": [[1, 0], [0, -1], [1, -2]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          i3_kicks: {
              "01": [[1, 0], [-1, 0], [0, 1], [0, -1]],
              10: [[-1, 0], [1, 0], [0, -1], [0, 1]],
              12: [[1, 0], [-1, 0], [0, -2], [0, 2]],
              21: [[-1, 0], [1, 0], [0, 2], [0, -2]],
              23: [[-1, 0], [1, 0], [0, 1], [0, -1]],
              32: [[1, 0], [-1, 0], [0, -1], [0, 1]],
              30: [[-1, 0], [1, 0], [0, 0], [0, 0]],
              "03": [[1, 0], [-1, 0], [0, 0], [0, 0]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          l3_kicks: {
              "01": [[-1, 0], [1, 0]],
              10: [[1, 0], [-1, 0]],
              12: [[0, -1], [0, 1]],
              21: [[0, 1], [0, -1]],
              23: [[1, 0], [-1, 0]],
              32: [[-1, 0], [1, 0]],
              30: [[0, 1], [0, -1]],
              "03": [[0, -1], [0, 1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          i5_kicks: {
              "01": [[-2, 0], [2, 0], [-2, 1], [2, -2]],
              10: [[2, 0], [-2, 0], [2, -1], [-2, 2]],
              12: [[-2, 0], [2, 0], [-2, -2], [2, 1]],
              21: [[2, 0], [-2, 0], [2, 2], [-2, -1]],
              23: [[2, 0], [-2, 0], [2, -1], [-2, 2]],
              32: [[-2, 0], [2, 0], [-2, 1], [2, -2]],
              30: [[2, 0], [-2, 0], [2, 2], [-2, -1]],
              "03": [[-2, 0], [2, 0], [-2, -2], [2, 1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          oo_kicks: {
              "01": [[0, -1], [-1, -1], [0, 1], [-1, 1], [1, 0], [1, -1], [1, 1]],
              10: [[1, 0], [0, -1], [1, 1], [1, -1], [-1, 0], [-1, -1], [-1, 1]],
              12: [[-1, 0], [0, -1], [-1, 1], [-1, -1], [1, 0], [1, -1], [1, 1]],
              21: [[0, -1], [1, -1], [0, 1], [1, 1], [-1, 0], [-1, -1], [-1, 1]],
              23: [[0, -1], [-1, -1], [0, 1], [-1, 1], [1, 0], [1, -1], [1, 1]],
              32: [[1, 0], [0, -1], [1, 1], [1, -1], [-1, 0], [-1, -1], [-1, 1]],
              30: [[-1, 0], [0, -1], [-1, 1], [-1, -1], [1, 0], [1, -1], [1, 1]],
              "03": [[0, -1], [1, -1], [0, 1], [1, 1], [-1, 0], [-1, -1], [-1, 1]],
              "02": [[0, -1]],
              13: [[1, 0]],
              20: [[0, 1]],
              31: [[-1, 0]]
          },
          additional_offsets: {},
          spawn_rotation: {},
          color_overrides: {},
          preview_overrides: {}
      },
      "SRS+": {
          kicks: {
              "01": [[-1, 0], [-1, -1], [0, 2], [-1, 2]],
              10: [[1, 0], [1, 1], [0, -2], [1, -2]],
              12: [[1, 0], [1, 1], [0, -2], [1, -2]],
              21: [[-1, 0], [-1, -1], [0, 2], [-1, 2]],
              23: [[1, 0], [1, -1], [0, 2], [1, 2]],
              32: [[-1, 0], [-1, 1], [0, -2], [-1, -2]],
              30: [[-1, 0], [-1, 1], [0, -2], [-1, -2]],
              "03": [[1, 0], [1, -1], [0, 2], [1, 2]],
              "02": [[0, -1], [1, -1], [-1, -1], [1, 0], [-1, 0]],
              13: [[1, 0], [1, -2], [1, -1], [0, -2], [0, -1]],
              20: [[0, 1], [-1, 1], [1, 1], [-1, 0], [1, 0]],
              31: [[-1, 0], [-1, -2], [-1, -1], [0, -2], [0, -1]]
          },
          i_kicks: {
              "01": [[1, 0], [-2, 0], [-2, 1], [1, -2]],
              10: [[-1, 0], [2, 0], [-1, 2], [2, -1]],
              12: [[-1, 0], [2, 0], [-1, -2], [2, 1]],
              21: [[-2, 0], [1, 0], [-2, -1], [1, 2]],
              23: [[2, 0], [-1, 0], [2, -1], [-1, 2]],
              32: [[1, 0], [-2, 0], [1, -2], [-2, 1]],
              30: [[1, 0], [-2, 0], [1, 2], [-2, -1]],
              "03": [[-1, 0], [2, 0], [2, 1], [-1, -2]],
              "02": [[0, -1]],
              13: [[1, 0]],
              20: [[0, 1]],
              31: [[-1, 0]]
          },
          i2_kicks: {
              "01": [[0, -1], [-1, 0], [-1, -1]],
              10: [[0, 1], [1, 0], [1, 1]],
              12: [[1, 0], [0, -1], [1, 0]],
              21: [[-1, 0], [0, 1], [-1, 0]],
              23: [[0, 1], [1, 0], [1, -1]],
              32: [[0, -1], [-1, 0], [-1, 1]],
              30: [[-1, 0], [0, 1], [-1, 2]],
              "03": [[1, 0], [0, -1], [1, -2]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          i3_kicks: {
              "01": [[1, 0], [-1, 0], [0, 1], [0, -1]],
              10: [[-1, 0], [1, 0], [0, -1], [0, 1]],
              12: [[1, 0], [-1, 0], [0, -2], [0, 2]],
              21: [[-1, 0], [1, 0], [0, 2], [0, -2]],
              23: [[-1, 0], [1, 0], [0, 1], [0, -1]],
              32: [[1, 0], [-1, 0], [0, -1], [0, 1]],
              30: [[-1, 0], [1, 0], [0, 0], [0, 0]],
              "03": [[1, 0], [-1, 0], [0, 0], [0, 0]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          l3_kicks: {
              "01": [[-1, 0], [1, 0]],
              10: [[1, 0], [-1, 0]],
              12: [[0, -1], [0, 1]],
              21: [[0, 1], [0, -1]],
              23: [[1, 0], [-1, 0]],
              32: [[-1, 0], [1, 0]],
              30: [[0, 1], [0, -1]],
              "03": [[0, -1], [0, 1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          i5_kicks: {
              "01": [[-2, 0], [2, 0], [-2, 1], [2, -2]],
              10: [[2, 0], [-2, 0], [2, -1], [-2, 2]],
              12: [[-2, 0], [2, 0], [-2, -2], [2, 1]],
              21: [[2, 0], [-2, 0], [2, 2], [-2, -1]],
              23: [[2, 0], [-2, 0], [2, -1], [-2, 2]],
              32: [[-2, 0], [2, 0], [-2, 1], [2, -2]],
              30: [[2, 0], [-2, 0], [2, 2], [-2, -1]],
              "03": [[-2, 0], [2, 0], [-2, -2], [2, 1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          oo_kicks: {
              "01": [[0, -1], [-1, -1], [0, 1], [-1, 1], [1, 0], [1, -1], [1, 1]],
              10: [[1, 0], [0, -1], [1, 1], [1, -1], [-1, 0], [-1, -1], [-1, 1]],
              12: [[-1, 0], [0, -1], [-1, 1], [-1, -1], [1, 0], [1, -1], [1, 1]],
              21: [[0, -1], [1, -1], [0, 1], [1, 1], [-1, 0], [-1, -1], [-1, 1]],
              23: [[0, -1], [-1, -1], [0, 1], [-1, 1], [1, 0], [1, -1], [1, 1]],
              32: [[1, 0], [0, -1], [1, 1], [1, -1], [-1, 0], [-1, -1], [-1, 1]],
              30: [[-1, 0], [0, -1], [-1, 1], [-1, -1], [1, 0], [1, -1], [1, 1]],
              "03": [[0, -1], [1, -1], [0, 1], [1, 1], [-1, 0], [-1, -1], [-1, 1]],
              "02": [[0, -1]],
              13: [[1, 0]],
              20: [[0, 1]],
              31: [[-1, 0]]
          },
          additional_offsets: {},
          spawn_rotation: {},
          color_overrides: {},
          preview_overrides: {}
      },
      "SRS-X": {
          kicks: {
              "01": [[-1, 0], [-1, -1], [0, 2], [-1, 2]],
              10: [[1, 0], [1, 1], [0, -2], [1, -2]],
              12: [[1, 0], [1, 1], [0, -2], [1, -2]],
              21: [[-1, 0], [-1, -1], [0, 2], [-1, 2]],
              23: [[1, 0], [1, -1], [0, 2], [1, 2]],
              32: [[-1, 0], [-1, 1], [0, -2], [-1, -2]],
              30: [[-1, 0], [-1, 1], [0, -2], [-1, -2]],
              "03": [[1, 0], [1, -1], [0, 2], [1, 2]],
              "02": [[1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0]],
              13: [[0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3]],
              20: [[-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0]],
              31: [[0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3]]
          },
          i_kicks: {
              "01": [[-2, 0], [1, 0], [-2, 1], [1, -2]],
              10: [[2, 0], [-1, 0], [2, -1], [-1, 2]],
              12: [[-1, 0], [2, 0], [-1, -2], [2, 1]],
              21: [[1, 0], [-2, 0], [1, 2], [-2, -1]],
              23: [[2, 0], [-1, 0], [2, -1], [-1, 2]],
              32: [[-2, 0], [1, 0], [-2, 1], [1, -2]],
              30: [[1, 0], [-2, 0], [1, 2], [-2, -1]],
              "03": [[-1, 0], [2, 0], [-1, -2], [2, 1]],
              "02": [[-1, 0], [-2, 0], [1, 0], [2, 0], [0, 1]],
              13: [[0, 1], [0, 2], [0, -1], [0, -2], [-1, 0]],
              20: [[1, 0], [2, 0], [-1, 0], [-2, 0], [0, -1]],
              31: [[0, 1], [0, 2], [0, -1], [0, -2], [1, 0]]
          },
          i2_kicks: {
              "01": [[0, -1], [-1, 0], [-1, -1]],
              10: [[0, 1], [1, 0], [1, 1]],
              12: [[1, 0], [0, -1], [1, 0]],
              21: [[-1, 0], [0, 1], [-1, 0]],
              23: [[0, 1], [1, 0], [1, -1]],
              32: [[0, -1], [-1, 0], [-1, 1]],
              30: [[-1, 0], [0, 1], [-1, 2]],
              "03": [[1, 0], [0, -1], [1, -2]],
              "02": [[-1, 0], [-2, 0], [1, 0], [2, 0], [0, 1]],
              13: [[0, 1], [0, 2], [0, -1], [0, -2], [-1, 0]],
              20: [[1, 0], [2, 0], [-1, 0], [-2, 0], [0, -1]],
              31: [[0, 1], [0, 2], [0, -1], [0, -2], [1, 0]]
          },
          i3_kicks: {
              "01": [[1, 0], [-1, 0], [0, 1], [0, -1]],
              10: [[-1, 0], [1, 0], [0, -1], [0, 1]],
              12: [[1, 0], [-1, 0], [0, -2], [0, 2]],
              21: [[-1, 0], [1, 0], [0, 2], [0, -2]],
              23: [[-1, 0], [1, 0], [0, 1], [0, -1]],
              32: [[1, 0], [-1, 0], [0, -1], [0, 1]],
              30: [[-1, 0], [1, 0], [0, 0], [0, 0]],
              "03": [[1, 0], [-1, 0], [0, 0], [0, 0]],
              "02": [[1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0]],
              13: [[0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3]],
              20: [[-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0]],
              31: [[0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3]]
          },
          l3_kicks: {
              "01": [[-1, 0], [1, 0]],
              10: [[1, 0], [-1, 0]],
              12: [[0, -1], [0, 1]],
              21: [[0, 1], [0, -1]],
              23: [[1, 0], [-1, 0]],
              32: [[-1, 0], [1, 0]],
              30: [[0, 1], [0, -1]],
              "03": [[0, -1], [0, 1]],
              "02": [[1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0]],
              13: [[0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3]],
              20: [[-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0]],
              31: [[0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3]]
          },
          i5_kicks: {
              "01": [[-2, 0], [2, 0], [-2, 1], [2, -2]],
              10: [[2, 0], [-2, 0], [2, -1], [-2, 2]],
              12: [[-2, 0], [2, 0], [-2, -2], [2, 1]],
              21: [[2, 0], [-2, 0], [2, 2], [-2, -1]],
              23: [[2, 0], [-2, 0], [2, -1], [-2, 2]],
              32: [[-2, 0], [2, 0], [-2, 1], [2, -2]],
              30: [[2, 0], [-2, 0], [2, 2], [-2, -1]],
              "03": [[-2, 0], [2, 0], [-2, -2], [2, 1]],
              "02": [[1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0]],
              13: [[0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3]],
              20: [[-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0]],
              31: [[0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3]]
          },
          oo_kicks: {
              "01": [[0, -1], [-1, -1], [0, 1], [-1, 1], [1, 0], [1, -1], [1, 1]],
              10: [[1, 0], [0, -1], [1, 1], [1, -1], [-1, 0], [-1, -1], [-1, 1]],
              12: [[-1, 0], [0, -1], [-1, 1], [-1, -1], [1, 0], [1, -1], [1, 1]],
              21: [[0, -1], [1, -1], [0, 1], [1, 1], [-1, 0], [-1, -1], [-1, 1]],
              23: [[0, -1], [-1, -1], [0, 1], [-1, 1], [1, 0], [1, -1], [1, 1]],
              32: [[1, 0], [0, -1], [1, 1], [1, -1], [-1, 0], [-1, -1], [-1, 1]],
              30: [[-1, 0], [0, -1], [-1, 1], [-1, -1], [1, 0], [1, -1], [1, 1]],
              "03": [[0, -1], [1, -1], [0, 1], [1, 1], [-1, 0], [-1, -1], [-1, 1]],
              "02": [[0, -1]],
              13: [[1, 0]],
              20: [[0, 1]],
              31: [[-1, 0]]
          },
          additional_offsets: {},
          spawn_rotation: {},
          color_overrides: {},
          preview_overrides: {}
      },
      "TETRA-X": {
          kicks: {
              "01": [[0, 1], [-1, 0], [1, 0], [-1, 1], [1, 1], [0, -1], [-1, -1], [1, -1]],
              10: [[0, 1], [1, 0], [-1, 0], [1, 1], [-1, 1], [0, -1], [1, -1], [-1, -1]],
              12: [[0, 1], [-1, 0], [1, 0], [-1, 1], [1, 1], [0, -1], [-1, -1], [1, -1]],
              21: [[0, 1], [1, 0], [-1, 0], [1, 1], [-1, 1], [0, -1], [1, -1], [-1, -1]],
              23: [[0, 1], [-1, 0], [1, 0], [-1, 1], [1, 1], [0, -1], [-1, -1], [1, -1]],
              32: [[0, 1], [1, 0], [-1, 0], [1, 1], [-1, 1], [0, -1], [1, -1], [-1, -1]],
              30: [[0, 1], [-1, 0], [1, 0], [-1, 1], [1, 1], [0, -1], [-1, -1], [1, -1]],
              "03": [[0, 1], [1, 0], [-1, 0], [1, 1], [-1, 1], [0, -1], [1, -1], [-1, -1]],
              "02": [[0, 1], [0, -1], [-1, 0], [1, 0]],
              13: [[0, 1], [0, -1], [-1, 0], [1, 0]],
              20: [[0, 1], [0, -1], [-1, 0], [1, 0]],
              31: [[0, 1], [0, -1], [-1, 0], [1, 0]]
          },
          i_kicks: {
              "01": [[0, -1], [0, -2], [0, 1], [1, -1], [-1, -1], [1, -2], [-1, -2]],
              10: [[0, -1], [0, -2], [0, 1], [-1, 0], [1, 0], [2, 0]],
              12: [[0, -1], [0, -2], [0, 1], [-1, 0], [1, 0], [2, 0]],
              21: [[0, 1], [0, 2], [0, -1], [-1, 1], [1, 1], [-1, 2], [1, 2]],
              23: [[0, 1], [0, 2], [0, -1], [1, 1], [-1, 1], [1, 2], [-1, 2]],
              32: [[0, -1], [0, -2], [0, 1], [1, 0], [-1, 0], [-2, 0]],
              30: [[0, -1], [0, -2], [0, 1], [1, 0], [-1, 0], [-2, 0]],
              "03": [[0, -1], [0, -2], [0, 1], [-1, -1], [1, -1], [-1, -2], [1, -2]],
              "02": [[0, -1], [0, 1]],
              13: [[0, -1], [0, 1]],
              20: [[0, -1], [0, 1]],
              31: [[0, -1], [0, 1]]
          },
          additional_offsets: {},
          spawn_rotation: {},
          color_overrides: {
              i1: "l",
              i2: "l",
              i3: "l",
              l3: "o",
              i5: "l",
              l: "o",
              o: "s",
              s: "i",
              i: "l",
              oo: "s"
          },
          preview_overrides: {}
      },
      NRS: {
          kicks: {
              "01": [],
              10: [],
              12: [],
              21: [],
              23: [],
              32: [],
              30: [],
              "03": [],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          additional_offsets: {
              z: [[1, 1], [1, 0], [1, 0], [2, 0]],
              l: [[1, 0], [1, 0], [1, 0], [1, 0]],
              o: [[0, 0], [0, 0], [0, 0], [0, 0]],
              s: [[1, 1], [1, 0], [1, 0], [2, 0]],
              i: [[0, 1], [0, 0], [0, 0], [1, 0]],
              j: [[1, 0], [1, 0], [1, 0], [1, 0]],
              t: [[1, 0], [1, 0], [1, 0], [1, 0]]
          },
          spawn_rotation: {
              z: 0,
              l: 2,
              o: 0,
              s: 0,
              i: 0,
              j: 2,
              t: 2
          },
          color_overrides: {},
          preview_overrides: {
              l: [[0, 0, 201], [1, 0, 68], [2, 0, 124], [0, 1, 31]],
              j: [[0, 0, 199], [1, 0, 68], [2, 0, 114], [2, 1, 31]],
              t: [[0, 0, 199], [1, 0, 74], [2, 0, 124], [1, 1, 31]]
          }
      },
      ARS: {
          kicks: {
              "01": [[1, 0], [-1, 0]],
              10: [[1, 0], [-1, 0]],
              12: [[1, 0], [-1, 0]],
              21: [[1, 0], [-1, 0]],
              23: [[1, 0], [-1, 0]],
              32: [[1, 0], [-1, 0]],
              30: [[1, 0], [-1, 0]],
              "03": [[1, 0], [-1, 0]],
              "02": [[1, 0], [-1, 0]],
              13: [[1, 0], [-1, 0]],
              20: [[1, 0], [-1, 0]],
              31: [[1, 0], [-1, 0]]
          },
          i_kicks: {
              "01": [],
              10: [],
              12: [],
              21: [],
              23: [],
              32: [],
              30: [],
              "03": [],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          additional_offsets: {
              i1: [[0, 0], [0, 0], [0, 0], [0, 0]],
              z: [[0, 1], [0, 0], [0, 0], [1, 0]],
              l: [[0, 1], [0, 0], [0, 0], [0, 0]],
              o: [[0, 0], [0, 0], [0, 0], [0, 0]],
              s: [[0, 1], [-1, 0], [0, 0], [0, 0]],
              i: [[0, 0], [0, 0], [0, -1], [1, 0]],
              j: [[0, 1], [0, 0], [0, 0], [0, 0]],
              t: [[0, 1], [0, 0], [0, 0], [0, 0]]
          },
          spawn_rotation: {
              z: 0,
              l: 2,
              o: 0,
              s: 0,
              i: 0,
              j: 2,
              t: 2
          },
          color_overrides: {
              i1: "z",
              i2: "z",
              i3: "z",
              i5: "z",
              z: "s",
              s: "t",
              i: "z",
              t: "i"
          },
          preview_overrides: {
              l: [[0, 0, 201], [1, 0, 68], [2, 0, 124], [0, 1, 31]],
              j: [[0, 0, 199], [1, 0, 68], [2, 0, 114], [2, 1, 31]],
              t: [[0, 0, 199], [1, 0, 74], [2, 0, 124], [1, 1, 31]]
          },
          center_column: {
              pieces: ["l", "j", "t"],
              rules: [[-1, -1], [0, -1], [1, -1], [-1, 0], [0, 0], [1, 0], [-1, 1], [0, 1], [1, 1]]
          }
      },
      ASC: {
          kicks: {
              "01": [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              10: [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              12: [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              21: [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              23: [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              32: [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              30: [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              "03": [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          i_kicks: {
              "01": [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              10: [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              12: [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              21: [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              23: [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              32: [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              30: [[-1, 0], [0, 1], [-1, 1], [0, 2], [-1, 2], [-2, 0], [-2, 1], [-2, 2], [1, 0], [1, 1], [0, -1], [-1, -1], [-2, -1], [1, 2], [2, 0], [0, -2], [-1, -2], [-2, -2], [2, 1], [2, 2], [1, -1]],
              "03": [[1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 0], [2, 1], [2, 2], [-1, 0], [-1, 1], [0, -1], [1, -1], [2, -1], [-1, 2], [-2, 0], [0, -2], [1, -2], [2, -2], [-2, 1], [-2, 2], [-1, -1]],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          allow_o_kick: !0,
          additional_offsets: {
              i1: [[0, 0], [0, 0], [0, 0], [0, 0]],
              z: [[0, 0], [0, 0], [0, 0], [0, 0]],
              l: [[0, 0], [0, 0], [0, 0], [0, 0]],
              o: [[0, 0], [0, 1], [-1, 1], [-1, 0]],
              s: [[0, 0], [0, 0], [0, 0], [0, 0]],
              i: [[0, 0], [0, -1], [1, -1], [1, 0]],
              j: [[0, 0], [0, 0], [0, 0], [0, 0]],
              t: [[0, 0], [0, 0], [0, 0], [0, 0]]
          },
          color_overrides: {},
          spawn_rotation: {},
          preview_overrides: {}
      },
      none: {
          kicks: {
              "01": [],
              10: [],
              12: [],
              21: [],
              23: [],
              32: [],
              30: [],
              "03": [],
              "02": [],
              13: [],
              20: [],
              31: []
          },
          additional_offsets: {},
          color_overrides: {},
          spawn_rotation: {},
          preview_overrides: {}
      }
  },
  cornerTable: {
      z: [[[-2, -1], [1, -1], [2, 0], [-1, 0]], [[0, -1], [1, -2], [0, 2], [1, 1]], [[-2, 0], [1, 0], [2, 1], [-1, 1]], [[-1, -1], [0, -2], [0, 1], [-1, 2]]],
      l: [[[-1, -1], [0, -1], [1, 1], [-1, 1]], [[-1, -1], [1, -1], [1, 0], [-1, 1]], [[-1, -1], [1, -1], [1, 1], [0, 1]], [[-1, 0], [1, -1], [1, 1], [-1, 1]]],
      s: [[[-1, -1], [2, -1], [1, 0], [-2, 0]], [[0, -2], [1, -1], [1, 2], [0, 1]], [[-1, 0], [2, 0], [1, 1], [-2, 1]], [[-1, -2], [0, -1], [-1, 1], [0, 2]]],
      j: [[[0, -1], [1, -1], [1, 1], [-1, 1]], [[-1, -1], [1, 0], [1, 1], [-1, 1]], [[-1, -1], [1, -1], [0, 1], [-1, 1]], [[-1, -1], [1, -1], [1, 1], [-1, 0]]],
      t: [[[-1, -1, 3, 0], [1, -1, 0, 1], [1, 1, 1, 2], [-1, 1, 2, 3]], [[-1, -1, 3, 0], [1, -1, 0, 1], [1, 1, 1, 2], [-1, 1, 2, 3]], [[-1, -1, 3, 0], [1, -1, 0, 1], [1, 1, 1, 2], [-1, 1, 2, 3]], [[-1, -1, 3, 0], [1, -1, 0, 1], [1, 1, 1, 2], [-1, 1, 2, 3]]]
  },
  scoring: {
      SINGLE: 100,
      DOUBLE: 300,
      TRIPLE: 500,
      QUAD: 800,
      PENTA: 1200,
      TSPIN_MINI: 100,
      TSPIN: 400,
      TSPIN_MINI_SINGLE: 200,
      TSPIN_SINGLE: 800,
      TSPIN_MINI_DOUBLE: 400,
      TSPIN_DOUBLE: 1200,
      TSPIN_MINI_TRIPLE: 800,
      TSPIN_TRIPLE: 1600,
      TSPIN_MINI_QUAD: 1600,
      TSPIN_QUAD: 2600,
      TSPIN_PENTA: 3200,
      BACKTOBACK_MULTIPLIER: 1.5,
      COMBO: 50,
      ALL_CLEAR: 3500,
      SOFTDROP: 1,
      HARDDROP: 2
  },
  garbage: {
      SINGLE: 0,
      DOUBLE: 1,
      TRIPLE: 2,
      QUAD: 4,
      PENTA: 5,
      TSPIN_MINI: 0,
      TSPIN: 0,
      TSPIN_MINI_SINGLE: 0,
      TSPIN_SINGLE: 2,
      TSPIN_MINI_DOUBLE: 1,
      TSPIN_DOUBLE: 4,
      TSPIN_MINI_TRIPLE: 2,
      TSPIN_TRIPLE: 6,
      TSPIN_MINI_QUAD: 4,
      TSPIN_QUAD: 10,
      TSPIN_PENTA: 12,
      BACKTOBACK_BONUS: 1,
      BACKTOBACK_BONUS_LOG: .8,
      COMBO_MINIFIER: 1,
      COMBO_MINIFIER_LOG: 1.25,
      COMBO_BONUS: .25,
      ALL_CLEAR: 10,
      combotable: {
          none: [0],
          "classic guideline": [0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5],
          "modern guideline": [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4]
      }
  },
  finesse: {
      z: {
          0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          1: [9, 2, 2, 2, 1, 1, 2, 3, 2, 2, 9],
          2: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          3: [9, 9, 2, 2, 2, 1, 1, 2, 3, 2, 2]
      },
      l: {
          0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          1: [9, 2, 2, 3, 2, 1, 2, 3, 3, 2, 9],
          2: [9, 9, 3, 4, 3, 2, 3, 4, 4, 3, 9],
          3: [9, 9, 2, 3, 2, 1, 2, 3, 3, 2, 2]
      },
      o: {
          0: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9],
          1: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9],
          2: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9],
          3: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9]
      },
      s: {
          0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          1: [9, 2, 2, 2, 1, 1, 2, 3, 2, 2, 9],
          2: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          3: [9, 9, 2, 2, 2, 1, 1, 2, 3, 2, 2]
      },
      i: {
          0: [9, 9, 1, 2, 1, 0, 1, 2, 1, 9, 9],
          1: [2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 9],
          2: [9, 9, 1, 2, 1, 0, 1, 2, 1, 9, 9],
          3: [9, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2]
      },
      j: {
          0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          1: [9, 2, 2, 3, 2, 1, 2, 3, 3, 2, 9],
          2: [9, 9, 3, 4, 3, 2, 3, 4, 4, 3, 9],
          3: [9, 9, 2, 3, 2, 1, 2, 3, 3, 2, 2]
      },
      t: {
          0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
          1: [9, 2, 2, 3, 2, 1, 2, 3, 3, 2, 9],
          2: [9, 9, 3, 4, 3, 2, 3, 4, 4, 3, 9],
          3: [9, 9, 2, 3, 2, 1, 2, 3, 3, 2, 2]
      }
  },
  zenithRevivePrompts: [["F", "combo", 3, "Perform a 3-Combo", 2, []], ["F", "double", 2, "Clear 2 Doubles", 2, []], ["F", "quad", 1, "Clear a Quad", 1, []], ["F", "lines", 6, "Clear 6 Lines", 1, []], ["F", "odouble", 1, "Clear a Double\nusing an O-Piece", 3, []], ["F", "garbageclear", 4, "Clear 4 Garbage Lines", 2, []], ["F", "szdouble", 1, "Clear a Double\nusing an S or Z-Piece", 3, []], ["F", "ljtriple", 1, "Clear a Triple\nusing an L or J-Piece", 3, []], ["E", "tspinmini", 1, "Perform a T-Spin Mini", 1, []], ["E", "tspinsingle", 1, "Clear a T-Spin Single", 2, []], ["E", "tspindouble", 1, "Clear a T-Spin Double", 2, []], ["E", "szspin", 1, "Clear an S/Z-Spin", 1, []], ["E", "ljspin", 1, "Clear an L/J-Spin", 1, []], ["E", "combo", 5, "Perform a 5-Combo", 2, []], ["E", "iflat", 2, "Clear 2 Lines using\nhorizontal I-Pieces", 3, []], ["E", "tank", 4, "Tank 4 Garbage Lines", 2, []], ["E", "cancel", 4, "Cancel 4 Garbage Lines", 2, []], ["D", "double", 4, "Clear 4 Doubles", 2, []], ["D", "spam", 3, "Place 3 pieces in a row\nwithout moving or rotating", 4, []], ["D", "noclear", 14, "Place 14 pieces in a row\nwithout clearing any lines", 4, []], ["D", "send", 6, "Send 6 Lines", 1, []], ["D", "pieces", 20, "Place 20 pieces", 2, []], ["D", "szdouble", 2, "Clear 2 Doubles\nusing S or Z-Pieces", 3, []], ["D", "ljtriple", 2, "Clear 2 Triples\nusing L or J-Pieces", 3, []], ["D", "ispinclear", 1, "Clear an I-Spin", 1, []], ["D", "upperhalfquad", 1, "Clear a Quad in the\nupper half of the board", 4, []], ["C", "tspintriple", 1, "Clear a T-Spin Triple", 2, []], ["C", "nohold", 25, "Place 25 pieces in a row\nwithout using Hold", 4, ["nohold"]], ["C", "triple", 3, "Clear 3 Triples", 2, []], ["C", "b2b", 4, "Reach B2B x4", 1, []], ["C", "quadbuckets", 2, "Clear a Quad in\n2 different columns", 3, []], ["C", "holdconsecutive", 12, "Use Hold on\n12 pieces in a row", 3, ["nohold"]], ["C", "softdrop", 10, "Place 10 pieces without\nreleasing Soft Drop", 4, []], ["C", "top3rows", 3, "Have part of your stack in\nthe top 3 rows for 3 seconds", 4, []], ["C", "linesnoti", 10, "Clear 10 Lines without\nclearing with T or I-pieces", 4, []], ["C", "szspintriple", 1, "Clear an S/Z-Spin Triple", 2, []], ["C", "odoubleconsecutive", 2, "Clear 2 Doubles consecutively\nusing two O-Pieces", 4, []], ["C", "tspinminiclear", 4, "Clear 4 T-Spin Minis", 2, []], ["B", "oclear", 6, "Clear 6 Lines\nusing O-Pieces", 3, []], ["B", "spinbuckets", 3, "Clear Spin-Clears\nwith 3 different pieces", 3, []], ["B", "quad", 4, "Clear 4 Quads", 1, []], ["B", "spam", 5, "Place 5 pieces in a row\nwithout moving or rotating", 4, []], ["B", "send", 18, "Send 18 Lines", 1, []], ["B", "ljspintriple", 1, "Clear an L/J-Spin Triple", 2, []], ["B", "quadconsecutive", 2, "Clear 2 Quads in a row", 2, []], ["B", "singlesonly", 8, "Clear 8 Singles without doing\nother clears or using Hold", 4, []], ["B", "nogarbage", 4, "Have no Garbage Lines on\nyour board for 4 seconds", 4, []], ["B", "rotate", 100, "Rotate 100 times", 2, []], ["B", "nocancel", 8, "Don't cancel any\ngarbage for 8 seconds", 3, []], ["A", "combo", 7, "Perform a 7-Combo", 2, []], ["A", "ispindouble", 1, "Clear an I-Spin Double", 2, []], ["A", "szspinconsecutive", 2, "Clear two S/Z-Spin\nDoubles consecutively", 3, []], ["A", "ljspinconsecutive", 2, "Clear two L/J-Spin\nDoubles consecutively", 3, []], ["A", "colorclear", 1, "Perform a Color Clear", 2, []], ["A", "lines", 40, "Clear 40 Lines", 1, []]],
  zenithReviveDecks: [[0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0], [1, 2, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 2, 1, 0, 0, 0], [0, 1, 2, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 2, 1, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 1, 0], [0, 0, 0, 1, 2, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 2, 1], [0, 0, 0, 0, 1, 2], [0, 0, 0, 0, 0, 3]],
  majorShoutStyles: {
      globalbest: ()=>{
          qr.play("confetti", {
              gui: !0,
              count: 30
          })
      }
      ,
      personalbest: ()=>{
          qr.play("confetti", {
              gui: !0,
              count: 15,
              hue: [30, 60]
          })
      }
      ,
      lg_victory: ()=>{
          setTimeout((()=>{
              qr.play("confetti", {
                  gui: !1,
                  count: 15,
                  hue: [30, 60]
              })
          }
          ), 1250)
      }
  },
  globalShoutStyles: {},
  gameModes: {
      "40l": {
          version: A,
          gameid: "X-PASSTHRU",
          seed_random: !1,
          anchorseed: !0,
          seed: "X-PASSTHRU",
          allow180: !0,
          g: .02,
          objective_type: "lines",
          objective_count: 40,
          handling: "X-PASSTHRU",
          countdown: "X-PASSTHRU",
          countdown_interval: "X-PASSTHRU",
          precountdown: "X-PASSTHRU",
          prestart: "X-PASSTHRU",
          mission: "X-PASSTHRU",
          zoominto: "X-PASSTHRU",
          bgmnoreset: "X-PASSTHRU",
          slot_counter1: "X-PASSTHRU",
          slot_counter2: "X-PASSTHRU",
          slot_counter3: "X-PASSTHRU",
          slot_counter4: "X-PASSTHRU",
          slot_counter5: "X-PASSTHRU",
          slot_bar2: "progress",
          can_retry: !0,
          nolockout: !0,
          pro: "X-PASSTHRU",
          pro_alert: "X-PASSTHRU",
          pro_retry: "X-PASSTHRU",
          stride: "X-PASSTHRU",
          no_szo: "X-PASSTHRU",
          fromretry: "X-PASSTHRU"
      },
      blitz: {
          version: A,
          gameid: "X-PASSTHRU",
          seed_random: !1,
          anchorseed: !0,
          seed: "X-PASSTHRU",
          allow180: !0,
          objective_type: "timed",
          objective_time: 12e4,
          levels: !0,
          levelspeed: .42,
          levelgbase: .65,
          gravitymay20g: !1,
          handling: "X-PASSTHRU",
          countdown: "X-PASSTHRU",
          countdown_interval: "X-PASSTHRU",
          precountdown: "X-PASSTHRU",
          prestart: "X-PASSTHRU",
          mission: "X-PASSTHRU",
          zoominto: "X-PASSTHRU",
          bgmnoreset: "X-PASSTHRU",
          slot_counter1: "X-PASSTHRU",
          slot_counter2: "X-PASSTHRU",
          slot_counter3: "X-PASSTHRU",
          slot_counter4: "X-PASSTHRU",
          slot_counter5: "X-PASSTHRU",
          slot_bar2: "progress",
          can_retry: !0,
          nolockout: !0,
          pro: "X-PASSTHRU",
          pro_alert: "X-PASSTHRU",
          pro_retry: "X-PASSTHRU",
          stride: "X-PASSTHRU",
          no_szo: "X-PASSTHRU",
          fromretry: "X-PASSTHRU"
      }
  },
  Strings: {
      cleartypes: ["NONE", "SINGLE", "DOUBLE", "TRIPLE", "QUAD", "PENTA", "HEXA", "HEPTA", "OCTA", "ENNEA", "DECA", "HENDECA", "DODECA", "TRIADECA", "TESSARADECA", "PENTEDECA", "HEXADECA", "HEPTADECA", "OCTADECA", "ENNEADECA", "EICOSA", "KAGARIS"],
      tspins: {
          mini: "\fc3MINI\f5 %%PIECE%%-spin",
          normal: "%%PIECE%%-spin"
      },
      extra: {
          btb: "back-to-back",
          btb_short: "BACK-TO-BACK",
          clear: "ALL\nCLEAR",
          colorclear: "COLOR\nCLEAR",
          zenlevel: "LEVEL\nCOMPLETE"
      },
      longTypeNames: {
          "40l": "40 LINES",
          blitz: "BLITZ",
          "5mblast": "5,000,000 BLAST",
          zen: "ZEN",
          custom: "CUSTOM GAME",
          league: "TETRA LEAGUE",
          zenith: "QUICK PLAY",
          zenithex: "EXPERT QUICK PLAY"
      },
      gameMissions: {
          "40l": "CLEAR 40 LINES!",
          blitz: "TWO-MINUTE BLITZ",
          "5mblast": "5,000,000 BLAST!",
          zen: "ZEN",
          "40 LINES": "CLEAR 40 LINES!",
          BLITZ: "TWO-MINUTE BLITZ",
          "5,000,000 BLAST": "5,000,000 BLAST!",
          ZEN: "ZEN"
      },
      zenithMods: {
          invisible: "Invisible",
          messy: "Messier Garbage",
          volatile: "Volatile Garbage",
          nohold: "No Hold",
          doublehole: "Double Hole Garbage",
          allspin: "All-Spin",
          gravity: "Gravity",
          expert: "Expert Mode",
          duo: "Duo"
      },
      zenithModsShort: {
          invisible: "IN",
          messy: "MS",
          volatile: "VL",
          nohold: "NH",
          doublehole: "DH",
          allspin: "AS",
          gravity: "GV",
          expert: "EX",
          duo: "2P"
      }
  }
};

const HIEROS = {
	'500000': 'ǰ',
	'400000': 'ǯǰ',
	'100000': 'ǯ',
	'90000': 'ǭǯ',
	'50000': 'Ǯ',
	'40000': 'ǭǮ',
	'10000': 'ǭ',
	'9000': 'ǫǭ',
	'5000': 'Ǭ',
	'4000': 'ǫǬ',
	'1000': 'ǫ',
	'900': 'ǩǫ',
	'500': 'Ǫ',
	'400': 'ǩǪ',
	'100': 'ǩ',
	'90': 'ǧǩ',
	'50': 'Ǩ',
	'40': 'ǧǨ',
	'10': 'ǧ',
	'9': 'ǥǧ',
	'5': 'Ǧ',
	'4': 'ǥǦ',
	'1': 'ǥ'
}
function Hiero(number) {
	const hierokeys = Object.keys(HIEROS);
	let outtext = '';
	number = Math.max(0, Math.floor(number));

	while (number >= 1) {
		for (let i = hierokeys.length - 1; i >= 0; i--) {
			if (number / parseInt(hierokeys[i]) >= 1) {
				number -= parseInt(hierokeys[i]);
				outtext += HIEROS[hierokeys[i]];
				break;
			}
		}
	}

	return outtext;
}
function Bt(e) {
  const t = Math.abs(Math.floor((new Date - e) / 1e3));
  let n = Math.floor(t / 31536e3);
  return n > 1 ? `${n} years` : (n = Math.floor(t / 2592e3),
  n > 1 ? `${n} months` : (n = Math.floor(t / 86400),
  n > 1 ? `${n} days` : (n = Math.floor(t / 3600),
  n > 1 ? `${n} hours` : (n = Math.floor(t / 60),
  n > 1 ? `${n} minutes` : `${Math.floor(t)} seconds`))))
}

function kt(e) {
  let t = Math.floor(e / 3600);
  return t > 1 ? `${t}<span>H</span>` : (t = Math.floor(e / 60),
  t > 1 ? `${t}<span>M</span>` : `${Math.floor(e)}<span>S</span>`)
}

function wt(e) {
  const t = Math.round(e)
    , n = t % 1e3
    , s = Math.floor(t / 1e3) % 60
    , i = Math.floor(t / 6e4);
  return {
      ms: n.toString().padStart(3, "0"),
      s: s.toString().padStart(2, "0"),
      m: i.toString()
  }
}

const zl = "0123456789#%&()*+,-./:<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ"
, Il = "ÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂă";

function Ml(e) {
  let t = "";
  for (let n = 0; n < e.length; n++) {
      const s = zl.indexOf(e[n]);
      t += -1 === s ? e[n] : Il[s]
  }
  return t
}


function updateLevelTag(){
  const tag = document.getElementById("level-tag");
  tag.textContent = Math.floor
  (Math.pow(output.data.xp/500 , 0.6) + output.data.xp / (5000 + (Math.max(0, output.data.xp - 4 * Math.pow(10,6))) / 5000)) + 1;


    if (tag.textContent.length === 0) return;
    let level = parseInt(tag.textContent);
    if (level >= 5000) {
        if (level > 5000) {
            tag.textContent = 5000;
        }
        tag.className = "level-tag level-tag-golden";
        return;
    }
    if (level < 1) {
        tag.textContent = 1;
        level = 1;
    }
    if (tag.textContent.startsWith("0")) {
        tag.textContent = level.toFixed(0);
    }
    const shapeColor = Math.floor(((level) % 100) / 10);
    const shape = Math.floor(((level) % 1000) / 100) % 5;
    const tagColor = Math.floor((level) / 500);
    tag.className = `level-tag level-tag-color-${tagColor} level-tag-shape-${shape} level-tag-shape-color-${shapeColor}`;
}



async function getData(user) {
  document.getElementById('text').innerHTML = 'Fetching...'

    const endpoint = 'https://ch.tetr.io/api/users/';
    try {
      const response = await fetch('https://cors-anywhere.herokuapp.com/' + endpoint + user);
      const responseRecord = await fetch('https://cors-anywhere.herokuapp.com/' + endpoint + user + '/summaries');
      if (!response.ok) {
        throw new Error(`Response status: ${response.status}`);
      }
  
      const json = await response.json();
      const jsonRecord = await responseRecord.json();

      output = json;
      outputRecord = jsonRecord;
    } catch (error) {
      document.getElementById('text').innerHTML = 'Fetch failed. Either you mistyped something, or the acccount no longer exists.'
      console.warn(error.message);
    }

    document.getElementById('fetch').disabled = true

    setTimeout(() => {
      document.getElementById('fetch').disabled = false
    }, 5000);

    if(output.success){
      document.getElementById('text').innerHTML = 'Fetched!'
    }

    
}

function draw(){
  let Rn = [];
  let profile = document.getElementById('profile')
  profile.classList = 'oob_modal tetra_modal'
  let year = new Date().getFullYear() - new Date(output.data.ts).getFullYear()
  if(year <= 0){
    year = 'less than 1'
  }
  profile.innerHTML = '' //reset

  // banner
  if(output.data.banner_revision != undefined){
    profile.classList.add('has_banner')

    profile.innerHTML += '<img class="tetra_modal_banner ns" src="https:/tetr.io/user-content/banners/' + output.data._id + '.jpg?rv=' + output.data.banner_revision + '">' 

    profile.innerHTML += '<div class="tetra_modal_banner_sep ns"></div>' //banner sep
  }

///////////////////////////////////////////////

  // pfp
  if(output.data.avatar_revision != 0){
    profile.innerHTML += '<img class="avatar" src="https://tetr.io/user-content/avatars/' + output.data._id + '.jpg?rv=' + output.data.avatar_revision + '">' 
  }
  if(output.data.avatar_revision == 0 || output.data.role == 'anon' || output.data.role == 'hidden' || output.data.role == 'bot'){
    profile.innerHTML += '<img class="avatar" src="https://tetr.io/res/avatar.png">' 
  }
//////////////////////////////////////////////
//username + flag


  if(output.data.country != null){
    profile.innerHTML += '<h2>' + output.data.username.toLocaleUpperCase() + '<img class="flag" src="https://tetr.io/res/flags/' + output.data.country.toLocaleLowerCase()  + '.png"></h2>' 
  }

  if(output.data.country == null){
    profile.innerHTML += '<h2>' + output.data.username.toLocaleUpperCase()
  }
 
//////////////////////////////////////////////
//time + friend
if(output.data.role != 'banned'){
  profile.innerHTML += '<h3> JOINED ' + Bt(Date.parse(output.data.ts)).toUpperCase()
  + ' AGO - <span title="Amount of players who have friended this person"><img src="https://tetr.io/res/icon/friends.svg">' + output.data.friend_count + '</span> </h3>' 
}

//////////////////////////////////////////////
//level, playtime, games, spter

  const t = document.createElement('div')
  var tag = document.createElement("div")
  t.classList.add('tetra_tag_holder', 'ns')
  profile.appendChild(t)

  if(output.data.gametime != -1){
    var tag = document.createElement("div")
    tag.classList.add("tetra_tag_gametime");
    tag.title = 'Total time played';
    tag.innerHTML = kt(output.data.gametime)
    t.appendChild(tag)
  }

  if(output.data.role != 'banned'){
    var tag = document.createElement("div")
    tag.id = 'level-tag'
    tag.title = 'Player\'s level';
    t.appendChild(tag)
    updateLevelTag()
  }

  if(output.data.gameswon != -1 || output.data.gamesplayed != -1){
    var tag = document.createElement("div")
    tag.classList.add('tetra_tag_record')
    tag.title = 'Online games won / online games played';

    if(output.data.gameswon != -1){
      tag.innerHTML += '<span>'+ output.data.gameswon +'</span>'
    }
    if(output.data.gamesplayed != -1){
      tag.innerHTML += ' / ' + output.data.gamesplayed
    }

    t.appendChild(tag)
  }

  if(output.data.supporter){
    var tag = document.createElement("img")
    tag.classList.add("supporter_badge");
    tag.src = "https://tetr.io/res/supporter" + output.data.supporter_tier + ".png"
    tag.title = 'This person is supporting TETR.IO ♥';
    t.appendChild(tag)
  }

  //bad stand
  if (output.data.badstanding && output.data.role != 'banned') {
    const e = document.createElement("div");
    e.classList.add("tetra_badstanding"),
    e.classList.add("ns"),
    e.innerHTML = "<h1>BAD STANDING</h1><p>one or more recent bans on record</p>",
    t.appendChild(e)
}
  


//////////////////////////////////////////////
//badges
if(output.data.badges.length != 0){

      const badgeHolder = document.createElement("div");
      badgeHolder.classList.add("tetra_badge_holder", "ns");
      profile.appendChild(badgeHolder);
      
      for (let i = 0; i < output.data.badges.length; i++) {
        const badgeImage = document.createElement("img");
        badgeImage.classList.add("tetra_badge");
        badgeImage.src = "https://tetr.io/res/badges/" + output.data.badges[i].id + ".png";
        badgeImage.title = output.data.badges[i].label;
        badgeHolder.appendChild(badgeImage);
      }
}

//////////////////
//other roles

if ("anon" === output.data.role) {
  const e = document.createElement("div");
  e.classList.add("tetra_modal_warning"),
  e.innerHTML = "this user is playing anonymously",
  profile.appendChild(e)
} else if ("hidden" === output.data.role) {
  const e = document.createElement("div");
  e.classList.add("tetra_modal_warning"),
  e.innerHTML = "information about this user is currently unavailable",
  profile.appendChild(e)
} else if ("banned" === output.data.role) {
  const e = document.createElement("div");
  e.classList.add("tetra_modal_warning"),
  e.innerHTML = "<h1>BANNED</h1>this user is currently banned. bans are placed when TETR.IO rules or terms of service are broken.",
  profile.appendChild(e)
  document.getElementById('profile').classList.add("banned")
} else if ("bot" === output.data.role) {
  const e = document.createElement("div");
  e.classList.add("tetra_modal_warning"),
  e.innerHTML = "<h1>BOT</h1><br><br>this is a known bot. all bots must have this tag, or it and its owners will be permanently banned." + (output.data.botmaster ? `<br><br>this bot is operated by <b>${output.data.botmaster}</b>` : ""),
  profile.appendChild(e)
}
//stat
else {
  const e = document.createElement("div");
  e.classList.add("tetra_modal_records"),
  e.classList.add("flex-row"),
  document.getElementById('profile').appendChild(e);
  const s = output.data.country ? `<img class="flag" src="https://tetr.io/res/flags/${output.data.country.toLowerCase()}.png" title="${Rn[output.data.country]}" />` : "";
  if (0 !== outputRecord.data.league.gamesplayed) {
      const t = document.createElement("div");
      t.classList.add("tetra_modal_record"),
      t.classList.add("flex-item"),
      t.classList.add("tetra_modal_record_league"),
      outputRecord.data.league.gamesplayed >= 10 ? (t.innerHTML = `\n\t\t\t\t\t\t\t<div class="tetra_modal_record_header">\n\t\t\t\t\t\t\t\t<img class='mode_icon' src='https://ch.tetr.io/res/league.svg'><h6>TETRA LEAGUE</h6>\n\t\t\t\t\t\t\t\t<div class="standingset">\n\t\t\t\t\t\t\t\t\t${-1 !== outputRecord.data.league.standing_local ? `\n\t\t\t\t\t\t\t\t\t\t<div class="standingset_local">${s} #<span>${outputRecord.data.league.standing_local.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t\t\t ${-1 !== outputRecord.data.league.standing ? `\n\t\t\t\t\t\t\t\t\t\t<div class="standingset_global ${1 === outputRecord.data.league.standing ? "t1" : ""}" data-digits="${(outputRecord.data.league.standing - 1).toString().length}">#<span>${outputRecord.data.league.standing.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h5 title="${outputRecord.data.league.tr}"><img src="https://tetr.io/res/league-ranks/${outputRecord.data.league.rank}.png" />${Math.round(outputRecord.data.league.tr)}<span class="ms">TR</span></h5>\n\t\t\t\t\t\t\t<h3><span>${outputRecord.data.league.apm || "---"}</span> apm <span>${outputRecord.data.league.pps || "---"}</span> pps <span>${outputRecord.data.league.vs || "---"}</span> vs</h3>`,
      t.classList.add("tetra_modal_record_league_active")) : t.innerHTML = `\n\t\t\t\t\t\t\t<div class="tetra_modal_record_header"><h6>TETRA LEAGUE</h6></div>\n\t\t\t\t\t\t\t<h5>${outputRecord.data.league.gamesplayed}<span class="ms">/10 rating games</span></h5>\n\t\t\t\t\t\t\t<h3><span>${outputRecord.data.league.gameswon}</span> game${1 === outputRecord.data.league.gameswon ? "" : "s"} won</h3>\n\t\t\t\t\t\t`,
      e.appendChild(t)
  }
  if (outputRecord.data["40l"].record) {
      const t = outputRecord.data["40l"]
        , i = t.record
        , o = wt(i.results.stats.finaltime)
        , a = document.createElement("div");
      a.classList.add("tetra_modal_record"),
      a.classList.add("flex-item"),
      a.innerHTML = `\n\t\t\t\t\t\t<div class="tetra_modal_record_header">\n\t\t\t\t\t\t\t<img class='mode_icon' src='https://ch.tetr.io/res/40l.svg'><h6>${dataset.Strings.longTypeNames["40l"]}</h6>\n\t\t\t\t\t\t\t<div class="standingset">\n\t\t\t\t\t\t\t\t${t.rank_local ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_local">${s} #<span>${t.rank_local.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t\t ${t.rank ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_global ${1 === t.rank ? "t1" : ""}" data-digits="${(t.rank - 1).toString().length}">#<span>${t.rank.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h5>${o.m}:${o.s}<span class="ms">.${o.ms}</span></h5>\n\t\t\t\t\t\t<h3><span>${Bt(Date.parse(i.ts)).toUpperCase()}</span> ago</h3>`,
      e.appendChild(a)
  }
  if (outputRecord.data.blitz.record) {
      const t = outputRecord.data.blitz
        , i = t.record
        , o = document.createElement("div");
      o.classList.add("tetra_modal_record"),
      o.classList.add("flex-item"),
      o.innerHTML = `\n\t\t\t\t\t\t<div class="tetra_modal_record_header">\n\t\t\t\t\t\t\t<img class='mode_icon' src='https://ch.tetr.io/res/blitz.svg'><h6>${dataset.Strings.longTypeNames.blitz}</h6>\n\t\t\t\t\t\t\t<div class="standingset">\n\t\t\t\t\t\t\t\t${t.rank_local ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_local">${s} #<span>${t.rank_local.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t\t ${t.rank ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_global ${1 === t.rank ? "t1" : ""}" data-digits="${(t.rank - 1).toString().length}">#<span>${t.rank.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h5>${i.results.stats.score.toLocaleString("en-US")}</h5>\n\t\t\t\t\t\t<h3><span>${Bt(Date.parse(i.ts)).toUpperCase()}</span> ago</h3>`,
      e.appendChild(o)
  }
  if (outputRecord.data.zenith.record || outputRecord.data.zenith.best.record) {
      const t = outputRecord.data.zenith
        , i = t.record
        , o = t.best.record
        , a = document.createElement("div");
      a.classList.add("tetra_modal_record"),
      a.classList.add("flex-item"),
      a.innerHTML = `\n\t\t\t\t\t\t<div class="tetra_modal_record_header">\n\t\t\t\t\t\t\t<img class='mode_icon' src='https://ch.tetr.io/res/qp.svg'><h6>${dataset.Strings.longTypeNames.zenith}</h6>\n\t\t\t\t\t\t\t<div class="standingset">\n\t\t\t\t\t\t\t\t${t.rank_local ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_local">${s} #<span>${t.rank_local.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t\t ${t.rank ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_global ${1 === t.rank ? "t1" : ""}" data-digits="${(t.rank - 1).toString().length}">#<span>${t.rank.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t ${i ? `\n\t\t\t\t\t\t\t<h5 title="This week">${Math.floor(i.results.stats.zenith.altitude).toLocaleString("en-US")}<span class="ms">.${Math.floor(i.results.stats.zenith.altitude % 1 * 10)}</span><span class="unit">M</span></h5>\n\t\t\t\t\t\t` : `\n\t\t\t\t\t\t\t<h5 title="Not this week - player has not played this week" class="revolvedscore">${Math.floor(o.results.stats.zenith.altitude).toLocaleString("en-US")}<span class="ms">.${Math.floor(o.results.stats.zenith.altitude % 1 * 10)}</span><span class="unit">M</span></h5>\n\t\t\t\t\t\t`}\n\t\t\t\t\t\t ${i && o ? `\n\t\t\t\t\t\t\t<h3 title="Updates every week">career best <span>${Math.floor(o.results.stats.zenith.altitude).toLocaleString("en-US")}.${Math.floor(o.results.stats.zenith.altitude % 1 * 10)}</span>${Ml("M")} (#${t.best.rank.toLocaleString("en-US")})</h3>\n\t\t\t\t\t\t` : `\n\t\t\t\t\t\t\t<h3><span>${Bt(Date.parse((i ?? o).ts)).toUpperCase()}</span> ago</h3>\n\t\t\t\t\t\t`}`,
      e.appendChild(a)
  }
  if (outputRecord.data.zenithex.record || outputRecord.data.zenithex.best.record) {
      const t = outputRecord.data.zenithex
        , i = t.record
        , o = t.best.record
        , a = document.createElement("div");
      a.classList.add("tetra_modal_record"),
      a.classList.add("flex-item"),
      a.innerHTML = `\n\t\t\t\t\t\t<div class="tetra_modal_record_header">\n\t\t\t\t\t\t\t<img class='mode_icon' src='https://ch.tetr.io/res/qp.svg'><h6>${dataset.Strings.longTypeNames.zenithex}</h6><img class='mode_icon' src='https://ch.tetr.io/res/zenith-mods/expert.png'>\n\t\t\t\t\t\t\t<div class="standingset">\n\t\t\t\t\t\t\t\t${t.rank_local ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_local">${s} #<span>${t.rank_local.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t\t ${t.rank ? `\n\t\t\t\t\t\t\t\t\t<div class="standingset_global ${1 === t.rank ? "t1" : ""}" data-digits="${(t.rank - 1).toString().length}">#<span>${t.rank.toLocaleString("en-US")}</span></div>\n\t\t\t\t\t\t\t\t` : ""}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t ${i ? `\n\t\t\t\t\t\t\t<h5 title="This week">${Math.floor(i.results.stats.zenith.altitude).toLocaleString("en-US")}<span class="ms">.${Math.floor(i.results.stats.zenith.altitude % 1 * 10)}</span><span class="unit">M</span></h5>\n\t\t\t\t\t\t` : `\n\t\t\t\t\t\t\t<h5 title="Not this week - player has not played this week" class="revolvedscore">${Math.floor(o.results.stats.zenith.altitude).toLocaleString("en-US")}<span class="ms">.${Math.floor(o.results.stats.zenith.altitude % 1 * 10)}</span><span class="unit">M</span></h5>\n\t\t\t\t\t\t`}\n\t\t\t\t\t\t ${i && o ? `\n\t\t\t\t\t\t\t<h3 title="Updates every week">career best <span>${Math.floor(o.results.stats.zenith.altitude).toLocaleString("en-US")}.${Math.floor(o.results.stats.zenith.altitude % 1 * 10)}</span>${Ml("M")} (#${t.best.rank.toLocaleString("en-US")})</h3>\n\t\t\t\t\t\t` : `\n\t\t\t\t\t\t\t<h3><span>${Bt(Date.parse((i ?? o).ts)).toUpperCase()}</span> ago</h3>\n\t\t\t\t\t\t`}`,
      e.appendChild(a)
  }

  {
    const t = outputRecord.data.zen
      , i = t.score
      , l = t.level
      , o = document.createElement("div");
    o.classList.add("tetra_modal_record"),
    o.classList.add("flex-item"),
    o.innerHTML = `\n\t\t\t\t\t\t<div class="tetra_modal_record_header">\n\t\t\t\t\t\t\t<img class='mode_icon' src='https://ch.tetr.io/res/zen.svg'><h6>${dataset.Strings.longTypeNames.zen}</h6><h6>${Hiero(t.level)}</h6>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h5>${i.toLocaleString("en-US")}</h5>\n\t\t\t\t\t\t<h3>Level<span> ${l}</span></h3>`,
    e.appendChild(o)
}

}
}